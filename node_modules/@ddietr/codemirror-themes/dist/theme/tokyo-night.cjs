'use strict';

var view = require('@codemirror/view');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

const config = {
    name: 'tokyoNight',
    dark: true,
    background: '#1a1b26',
    foreground: '#787c99',
    selection: '#515c7e40',
    cursor: '#c0caf5',
    dropdownBackground: '#1a1b26',
    dropdownBorder: '#787c99',
    activeLine: '#43455c22',
    matchingBracket: '#16161e',
    keyword: '#bb9af7',
    storage: '#bb9af7',
    variable: '#c0caf5',
    parameter: '#c0caf5',
    function: '#7aa2f7',
    string: '#9ece6a',
    constant: '#bb9af7',
    type: '#0db9d7',
    class: '#c0caf5',
    number: '#ff9e64',
    comment: '#444b6a',
    heading: '#89ddff',
    invalid: '#ff5370',
    regexp: '#b4f9f8',
};
const tokyoNightTheme = view.EditorView.theme({
    '&': {
        color: config.foreground,
        backgroundColor: config.background,
    },
    '.cm-content': { caretColor: config.cursor },
    '.cm-cursor, .cm-dropCursor': { borderLeftColor: config.cursor },
    '&.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground, .cm-selectionBackground, .cm-content ::selection': { backgroundColor: config.selection },
    '.cm-panels': { backgroundColor: config.dropdownBackground, color: config.foreground },
    '.cm-panels.cm-panels-top': { borderBottom: '2px solid black' },
    '.cm-panels.cm-panels-bottom': { borderTop: '2px solid black' },
    '.cm-searchMatch': {
        backgroundColor: config.dropdownBackground,
        outline: `1px solid ${config.dropdownBorder}`
    },
    '.cm-searchMatch.cm-searchMatch-selected': {
        backgroundColor: config.selection
    },
    '.cm-activeLine': { backgroundColor: config.activeLine },
    '.cm-selectionMatch': { backgroundColor: config.selection },
    '&.cm-focused .cm-matchingBracket, &.cm-focused .cm-nonmatchingBracket': {
        backgroundColor: config.matchingBracket,
        outline: 'none'
    },
    '.cm-gutters': {
        backgroundColor: config.background,
        color: config.foreground,
        border: 'none'
    },
    '.cm-activeLineGutter': { backgroundColor: config.background },
    '.cm-foldPlaceholder': {
        backgroundColor: 'transparent',
        border: 'none',
        color: config.foreground
    },
    '.cm-tooltip': {
        border: `1px solid ${config.dropdownBorder}`,
        backgroundColor: config.dropdownBackground,
        color: config.foreground,
    },
    '.cm-tooltip .cm-tooltip-arrow:before': {
        borderTopColor: 'transparent',
        borderBottomColor: 'transparent'
    },
    '.cm-tooltip .cm-tooltip-arrow:after': {
        borderTopColor: config.foreground,
        borderBottomColor: config.foreground,
    },
    '.cm-tooltip-autocomplete': {
        '& > ul > li[aria-selected]': {
            background: config.selection,
            color: config.foreground,
        }
    }
}, { dark: config.dark });
const tokyoNightHighlightStyle = language.HighlightStyle.define([
    { tag: highlight.tags.keyword, color: config.keyword },
    { tag: [highlight.tags.name, highlight.tags.deleted, highlight.tags.character, highlight.tags.macroName], color: config.variable },
    { tag: [highlight.tags.propertyName], color: config.function },
    { tag: [highlight.tags.processingInstruction, highlight.tags.string, highlight.tags.inserted, highlight.tags.special(highlight.tags.string)], color: config.string },
    { tag: [highlight.tags.function(highlight.tags.variableName), highlight.tags.labelName], color: config.function },
    { tag: [highlight.tags.color, highlight.tags.constant(highlight.tags.name), highlight.tags.standard(highlight.tags.name)], color: config.constant },
    { tag: [highlight.tags.definition(highlight.tags.name), highlight.tags.separator], color: config.variable },
    { tag: [highlight.tags.className], color: config.class },
    { tag: [highlight.tags.number, highlight.tags.changed, highlight.tags.annotation, highlight.tags.modifier, highlight.tags.self, highlight.tags.namespace], color: config.number },
    { tag: [highlight.tags.typeName], color: config.type, fontStyle: config.type },
    { tag: [highlight.tags.operator, highlight.tags.operatorKeyword], color: config.keyword },
    { tag: [highlight.tags.url, highlight.tags.escape, highlight.tags.regexp, highlight.tags.link], color: config.regexp },
    { tag: [highlight.tags.meta, highlight.tags.comment], color: config.comment },
    { tag: highlight.tags.strong, fontWeight: 'bold' },
    { tag: highlight.tags.emphasis, fontStyle: 'italic' },
    { tag: highlight.tags.link, textDecoration: 'underline' },
    { tag: highlight.tags.heading, fontWeight: 'bold', color: config.heading },
    { tag: [highlight.tags.atom, highlight.tags.bool, highlight.tags.special(highlight.tags.variableName)], color: config.variable },
    { tag: highlight.tags.invalid, color: config.invalid },
    { tag: highlight.tags.strikethrough, textDecoration: 'line-through' },
]);
const tokyoNight = [
    tokyoNightTheme,
    language.syntaxHighlighting(tokyoNightHighlightStyle),
];

exports.config = config;
exports.tokyoNight = tokyoNight;
exports.tokyoNightHighlightStyle = tokyoNightHighlightStyle;
exports.tokyoNightTheme = tokyoNightTheme;
